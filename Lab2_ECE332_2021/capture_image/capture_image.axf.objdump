
C:/Users/kyleh/Desktop/ece332/Lab2_ECE332_2021/capture_image/capture_image.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 34 07 00 00 38 07 00 00 3c 07 00 00     @...4...8...<...
  30:	40 07 00 00 30 07 00 00 44 07 00 00 48 07 00 00     @...0...D...H...

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb00017c 	bl	6cc <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000830 	.word	0x00000830

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000c68 	.word	0x00000c68

00000124 <__cs3_heap_start_ptr>:
 124:	00000c90 	.word	0x00000c90

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000c70 	.word	0x00000c70
 170:	00000c73 	.word	0x00000c73
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000c70 	.word	0x00000c70
 1bc:	00000c70 	.word	0x00000c70
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000c70 	.word	0x00000c70
 200:	00000000 	.word	0x00000000
 204:	000007d4 	.word	0x000007d4

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	000007d4 	.word	0x000007d4
 250:	00000c74 	.word	0x00000c74
 254:	00000830 	.word	0x00000830
 258:	00000000 	.word	0x00000000

0000025c <main>:
 * 	2. Display the captured frame when any key is pressed.		  
*/
/* Note: Set the switches SW1 and SW2 to high and rest of the switches to low for correct exposure timing while compiling and the loading the program in the Altera Monitor program.
*/
int main(void)
{
 25c:	e92d4070 	push	{r4, r5, r6, lr}
	int x, y;

	while (1)
	{
		// FIRST IMAGE ============================================================
		*(Video_In_DMA_ptr + 3)	= 0x4;				// Enable the video
 260:	e303efff 	movw	lr, #16383	; 0x3fff
 264:	e34fef20 	movt	lr, #65312	; 0xff20
 268:	e3a04004 	mov	r4, #4
 26c:	e1a06004 	mov	r6, r4
		while (1)
		{
			if (*KEY_ptr != 0)						// check if any KEY was pressed
 270:	e3a0c000 	mov	r12, #0
 274:	e34fcf20 	movt	r12, #65312	; 0xff20
			{
				*(Video_In_DMA_ptr + 3) = 0x0;			// Disable the video to capture one frame
 278:	e3a05000 	mov	r5, #0
	int x, y;

	while (1)
	{
		// FIRST IMAGE ============================================================
		*(Video_In_DMA_ptr + 3)	= 0x4;				// Enable the video
 27c:	e50e6f93 	str	r6, [lr, #-3987]	; 0xfffff06d
		while (1)
		{
			if (*KEY_ptr != 0)						// check if any KEY was pressed
 280:	e59c3050 	ldr	r3, [r12, #80]	; 0x50
 284:	e3530000 	cmp	r3, #0
 288:	0afffffc 	beq	280 <main+0x24>
			{
				*(Video_In_DMA_ptr + 3) = 0x0;			// Disable the video to capture one frame
 28c:	e50e5f93 	str	r5, [lr, #-3987]	; 0xfffff06d
				while (*KEY_ptr != 0);				// wait for pushbutton KEY release
 290:	e59c3050 	ldr	r3, [r12, #80]	; 0x50
 294:	e3530000 	cmp	r3, #0
 298:	1afffffc 	bne	290 <main+0x34>
			}
		}
		
		while (1)
		{
			if (*KEY_ptr != 0)						// check if any KEY was pressed
 29c:	e59c3050 	ldr	r3, [r12, #80]	; 0x50
 2a0:	e3530000 	cmp	r3, #0
 2a4:	0afffffc 	beq	29c <main+0x40>
 2a8:	ea000007 	b	2cc <main+0x70>
			}
		}
		
		for (y = 0; y < 240; y++) {
			for (x = 0; x < 320; x++) {
				short temp2 = *(Video_Mem_ptr + (y << 9) + x);
 2ac:	e1d320b0 	ldrh	r2, [r3]
				*(Video_Mem_ptr + (y << 9) + x) = temp2;
 2b0:	e0c320b2 	strh	r2, [r3], #2
				break;
			}
		}
		
		for (y = 0; y < 240; y++) {
			for (x = 0; x < 320; x++) {
 2b4:	e1530001 	cmp	r3, r1
 2b8:	1afffffb 	bne	2ac <main+0x50>
			{
				break;
			}
		}
		
		for (y = 0; y < 240; y++) {
 2bc:	e2800001 	add	r0, r0, #1
 2c0:	e35000f0 	cmp	r0, #240	; 0xf0
 2c4:	1a000001 	bne	2d0 <main+0x74>
 2c8:	ea000007 	b	2ec <main+0x90>
			}
		}
		
		while (1)
		{
			if (*KEY_ptr != 0)						// check if any KEY was pressed
 2cc:	e1a00005 	mov	r0, r5
			}
		}
		
		for (y = 0; y < 240; y++) {
			for (x = 0; x < 320; x++) {
				short temp2 = *(Video_Mem_ptr + (y << 9) + x);
 2d0:	e1a01480 	lsl	r1, r0, #9
 * 	1. Capture one frame of video when any key is pressed.
 * 	2. Display the captured frame when any key is pressed.		  
*/
/* Note: Set the switches SW1 and SW2 to high and rest of the switches to low for correct exposure timing while compiling and the loading the program in the Altera Monitor program.
*/
int main(void)
 2d4:	e1a03500 	lsl	r3, r0, #10
 2d8:	e2833332 	add	r3, r3, #-939524096	; 0xc8000000
 2dc:	e2811319 	add	r1, r1, #1677721600	; 0x64000000
 2e0:	e2811d05 	add	r1, r1, #320	; 0x140
 2e4:	e1a01081 	lsl	r1, r1, #1
 2e8:	eaffffef 	b	2ac <main+0x50>
				*(Video_Mem_ptr + (y << 9) + x) = temp2;
			}
		}
		
		// RESUME VIDEO =============================================================
		*(Video_In_DMA_ptr + 3)	= 0x4;				// Enable the video
 2ec:	e50e4f93 	str	r4, [lr, #-3987]	; 0xfffff06d
		while (1)
		{
			if (*KEY_ptr != 0)						// check if any KEY was pressed
 2f0:	e59c3050 	ldr	r3, [r12, #80]	; 0x50
 2f4:	e3530000 	cmp	r3, #0
 2f8:	0afffffc 	beq	2f0 <main+0x94>
			{
				*(Video_In_DMA_ptr + 3)	= 0x4;
 2fc:	e50e4f93 	str	r4, [lr, #-3987]	; 0xfffff06d
				while (*KEY_ptr != 0);				// wait for pushbutton KEY release
 300:	e59c3050 	ldr	r3, [r12, #80]	; 0x50
 304:	e3530000 	cmp	r3, #0
 308:	1afffffc 	bne	300 <main+0xa4>
				break;
			}
		}
		
		// SECOND IMAGE ===============================================================
		*(Video_In_DMA_ptr + 3)	= 0x4;				// Enable the video
 30c:	e50e4f93 	str	r4, [lr, #-3987]	; 0xfffff06d
		while (1)
		{
			if (*KEY_ptr != 0)						// check if any KEY was pressed
 310:	e59c3050 	ldr	r3, [r12, #80]	; 0x50
 314:	e3530000 	cmp	r3, #0
 318:	0afffffc 	beq	310 <main+0xb4>
			{
				*(Video_In_DMA_ptr + 3) = 0x0;			// Disable the video to capture one frame
 31c:	e50e5f93 	str	r5, [lr, #-3987]	; 0xfffff06d
				while (*KEY_ptr != 0);				// wait for pushbutton KEY release
 320:	e59c3050 	ldr	r3, [r12, #80]	; 0x50
 324:	e3530000 	cmp	r3, #0
 328:	1afffffc 	bne	320 <main+0xc4>
			}
		}
		
		while (1)
		{
			if (*KEY_ptr != 0)						// check if any KEY was pressed
 32c:	e59c3050 	ldr	r3, [r12, #80]	; 0x50
 330:	e3530000 	cmp	r3, #0
 334:	0afffffc 	beq	32c <main+0xd0>
 338:	ea000007 	b	35c <main+0x100>
			}
		}
		
		for (y = 0; y < 240; y++) {
			for (x = 0; x < 320; x++) {
				short temp2 = *(Video_Mem_ptr + (y << 9) + x);
 33c:	e1d320b0 	ldrh	r2, [r3]
				*(Video_Mem_ptr + (y << 9) + x) = temp2;
 340:	e0c320b2 	strh	r2, [r3], #2
				break;
			}
		}
		
		for (y = 0; y < 240; y++) {
			for (x = 0; x < 320; x++) {
 344:	e1530001 	cmp	r3, r1
 348:	1afffffb 	bne	33c <main+0xe0>
			{
				break;
			}
		}
		
		for (y = 0; y < 240; y++) {
 34c:	e2800001 	add	r0, r0, #1
 350:	e35000f0 	cmp	r0, #240	; 0xf0
 354:	1a000001 	bne	360 <main+0x104>
 358:	ea000007 	b	37c <main+0x120>
			}
		}
		
		while (1)
		{
			if (*KEY_ptr != 0)						// check if any KEY was pressed
 35c:	e1a00005 	mov	r0, r5
			}
		}
		
		for (y = 0; y < 240; y++) {
			for (x = 0; x < 320; x++) {
				short temp2 = *(Video_Mem_ptr + (y << 9) + x);
 360:	e1a01480 	lsl	r1, r0, #9
 * 	1. Capture one frame of video when any key is pressed.
 * 	2. Display the captured frame when any key is pressed.		  
*/
/* Note: Set the switches SW1 and SW2 to high and rest of the switches to low for correct exposure timing while compiling and the loading the program in the Altera Monitor program.
*/
int main(void)
 364:	e1a03500 	lsl	r3, r0, #10
 368:	e2833332 	add	r3, r3, #-939524096	; 0xc8000000
 36c:	e2811319 	add	r1, r1, #1677721600	; 0x64000000
 370:	e2811d05 	add	r1, r1, #320	; 0x140
 374:	e1a01081 	lsl	r1, r1, #1
 378:	eaffffef 	b	33c <main+0xe0>
				*(Video_Mem_ptr + (y << 9) + x) = temp2;
			}
		}
		
		// RESUME VIDEO =============================================================
		*(Video_In_DMA_ptr + 3)	= 0x4;				// Enable the video
 37c:	e50e4f93 	str	r4, [lr, #-3987]	; 0xfffff06d
		while (1)
		{
			if (*KEY_ptr != 0)						// check if any KEY was pressed
 380:	e59c3050 	ldr	r3, [r12, #80]	; 0x50
 384:	e3530000 	cmp	r3, #0
 388:	0afffffc 	beq	380 <main+0x124>
			{
				*(Video_In_DMA_ptr + 3)	= 0x4;
 38c:	e50e4f93 	str	r4, [lr, #-3987]	; 0xfffff06d
				while (*KEY_ptr != 0);				// wait for pushbutton KEY release
 390:	e59c3050 	ldr	r3, [r12, #80]	; 0x50
 394:	e3530000 	cmp	r3, #0
 398:	1afffffc 	bne	390 <main+0x134>
 39c:	eaffffb6 	b	27c <main+0x20>

000003a0 <atexit>:
 3a0:	e1a01000 	mov	r1, r0
 3a4:	e3a00000 	mov	r0, #0
 3a8:	e92d4008 	push	{r3, lr}
 3ac:	e1a02000 	mov	r2, r0
 3b0:	e1a03000 	mov	r3, r0
 3b4:	eb00000e 	bl	3f4 <__register_exitproc>
 3b8:	e8bd4008 	pop	{r3, lr}
 3bc:	e12fff1e 	bx	lr

000003c0 <exit>:
 3c0:	e92d4008 	push	{r3, lr}
 3c4:	e3a01000 	mov	r1, #0
 3c8:	e1a04000 	mov	r4, r0
 3cc:	eb000045 	bl	4e8 <__call_exitprocs>
 3d0:	e59f3018 	ldr	r3, [pc, #24]	; 3f0 <exit+0x30>
 3d4:	e5930000 	ldr	r0, [r3]
 3d8:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 3dc:	e3530000 	cmp	r3, #0
 3e0:	11a0e00f 	movne	lr, pc
 3e4:	112fff13 	bxne	r3
 3e8:	e1a00004 	mov	r0, r4
 3ec:	eb0000c9 	bl	718 <_exit>
 3f0:	000007d8 	.word	0x000007d8

000003f4 <__register_exitproc>:
 3f4:	e59fc0e4 	ldr	r12, [pc, #228]	; 4e0 <__register_exitproc+0xec>
 3f8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 3fc:	e59c4000 	ldr	r4, [r12]
 400:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 404:	e35c0000 	cmp	r12, #0
 408:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 40c:	e59c5004 	ldr	r5, [r12, #4]
 410:	0584c148 	streq	r12, [r4, #328]	; 0x148
 414:	e355001f 	cmp	r5, #31
 418:	e24dd010 	sub	sp, sp, #16
 41c:	e1a06000 	mov	r6, r0
 420:	da000015 	ble	47c <__register_exitproc+0x88>
 424:	e59f00b8 	ldr	r0, [pc, #184]	; 4e4 <__register_exitproc+0xf0>
 428:	e3500000 	cmp	r0, #0
 42c:	1a000001 	bne	438 <__register_exitproc+0x44>
 430:	e3e00000 	mvn	r0, #0
 434:	ea000018 	b	49c <__register_exitproc+0xa8>
 438:	e3a00e19 	mov	r0, #400	; 0x190
 43c:	e58d100c 	str	r1, [sp, #12]
 440:	e58d2008 	str	r2, [sp, #8]
 444:	e58d3004 	str	r3, [sp, #4]
 448:	e320f000 	nop	{0}
 44c:	e250c000 	subs	r12, r0, #0
 450:	e59d100c 	ldr	r1, [sp, #12]
 454:	e59d2008 	ldr	r2, [sp, #8]
 458:	e59d3004 	ldr	r3, [sp, #4]
 45c:	0afffff3 	beq	430 <__register_exitproc+0x3c>
 460:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 464:	e3a00000 	mov	r0, #0
 468:	e58c0004 	str	r0, [r12, #4]
 46c:	e58c5000 	str	r5, [r12]
 470:	e584c148 	str	r12, [r4, #328]	; 0x148
 474:	e58c0188 	str	r0, [r12, #392]	; 0x188
 478:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 47c:	e3560000 	cmp	r6, #0
 480:	e59c4004 	ldr	r4, [r12, #4]
 484:	1a000007 	bne	4a8 <__register_exitproc+0xb4>
 488:	e2843002 	add	r3, r4, #2
 48c:	e2844001 	add	r4, r4, #1
 490:	e78c1103 	str	r1, [r12, r3, lsl #2]
 494:	e58c4004 	str	r4, [r12, #4]
 498:	e3a00000 	mov	r0, #0
 49c:	e28dd010 	add	sp, sp, #16
 4a0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 4a4:	e12fff1e 	bx	lr
 4a8:	e3a00001 	mov	r0, #1
 4ac:	e1a00410 	lsl	r0, r0, r4
 4b0:	e08c8104 	add	r8, r12, r4, lsl #2
 4b4:	e3560002 	cmp	r6, #2
 4b8:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 4bc:	e5883108 	str	r3, [r8, #264]	; 0x108
 4c0:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 4c4:	e1877000 	orr	r7, r7, r0
 4c8:	01830000 	orreq	r0, r3, r0
 4cc:	e1a05008 	mov	r5, r8
 4d0:	e5882088 	str	r2, [r8, #136]	; 0x88
 4d4:	e58c7188 	str	r7, [r12, #392]	; 0x188
 4d8:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 4dc:	eaffffe9 	b	488 <__register_exitproc+0x94>
 4e0:	000007d8 	.word	0x000007d8
 4e4:	00000000 	.word	0x00000000

000004e8 <__call_exitprocs>:
 4e8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 4ec:	e59f3168 	ldr	r3, [pc, #360]	; 65c <__call_exitprocs+0x174>
 4f0:	e5933000 	ldr	r3, [r3]
 4f4:	e24dd014 	sub	sp, sp, #20
 4f8:	e58d3004 	str	r3, [sp, #4]
 4fc:	e2833f52 	add	r3, r3, #328	; 0x148
 500:	e58d0008 	str	r0, [sp, #8]
 504:	e58d300c 	str	r3, [sp, #12]
 508:	e1a07001 	mov	r7, r1
 50c:	e3a08001 	mov	r8, #1
 510:	e59d3004 	ldr	r3, [sp, #4]
 514:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 518:	e3560000 	cmp	r6, #0
 51c:	e59db00c 	ldr	r11, [sp, #12]
 520:	0a000033 	beq	5f4 <__call_exitprocs+0x10c>
 524:	e5965004 	ldr	r5, [r6, #4]
 528:	e2554001 	subs	r4, r5, #1
 52c:	5286a088 	addpl	r10, r6, #136	; 0x88
 530:	5285501f 	addpl	r5, r5, #31
 534:	508a5105 	addpl	r5, r10, r5, lsl #2
 538:	5a000007 	bpl	55c <__call_exitprocs+0x74>
 53c:	ea000029 	b	5e8 <__call_exitprocs+0x100>
 540:	e5953000 	ldr	r3, [r5]
 544:	e1530007 	cmp	r3, r7
 548:	0a000005 	beq	564 <__call_exitprocs+0x7c>
 54c:	e2444001 	sub	r4, r4, #1
 550:	e3740001 	cmn	r4, #1
 554:	e2455004 	sub	r5, r5, #4
 558:	0a000022 	beq	5e8 <__call_exitprocs+0x100>
 55c:	e3570000 	cmp	r7, #0
 560:	1afffff6 	bne	540 <__call_exitprocs+0x58>
 564:	e5963004 	ldr	r3, [r6, #4]
 568:	e06a2005 	rsb	r2, r10, r5
 56c:	e2433001 	sub	r3, r3, #1
 570:	e0862002 	add	r2, r6, r2
 574:	e1530004 	cmp	r3, r4
 578:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 57c:	13a01000 	movne	r1, #0
 580:	05864004 	streq	r4, [r6, #4]
 584:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 588:	e3530000 	cmp	r3, #0
 58c:	0affffee 	beq	54c <__call_exitprocs+0x64>
 590:	e1a02418 	lsl	r2, r8, r4
 594:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 598:	e1120001 	tst	r2, r1
 59c:	e5969004 	ldr	r9, [r6, #4]
 5a0:	0a000016 	beq	600 <__call_exitprocs+0x118>
 5a4:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 5a8:	e1120001 	tst	r2, r1
 5ac:	1a000016 	bne	60c <__call_exitprocs+0x124>
 5b0:	e59d0008 	ldr	r0, [sp, #8]
 5b4:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 5b8:	e1a0e00f 	mov	lr, pc
 5bc:	e12fff13 	bx	r3
 5c0:	e5963004 	ldr	r3, [r6, #4]
 5c4:	e1530009 	cmp	r3, r9
 5c8:	1affffd0 	bne	510 <__call_exitprocs+0x28>
 5cc:	e59b3000 	ldr	r3, [r11]
 5d0:	e1530006 	cmp	r3, r6
 5d4:	1affffcd 	bne	510 <__call_exitprocs+0x28>
 5d8:	e2444001 	sub	r4, r4, #1
 5dc:	e3740001 	cmn	r4, #1
 5e0:	e2455004 	sub	r5, r5, #4
 5e4:	1affffdc 	bne	55c <__call_exitprocs+0x74>
 5e8:	e59f1070 	ldr	r1, [pc, #112]	; 660 <__call_exitprocs+0x178>
 5ec:	e3510000 	cmp	r1, #0
 5f0:	1a000009 	bne	61c <__call_exitprocs+0x134>
 5f4:	e28dd014 	add	sp, sp, #20
 5f8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 5fc:	e12fff1e 	bx	lr
 600:	e1a0e00f 	mov	lr, pc
 604:	e12fff13 	bx	r3
 608:	eaffffec 	b	5c0 <__call_exitprocs+0xd8>
 60c:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 610:	e1a0e00f 	mov	lr, pc
 614:	e12fff13 	bx	r3
 618:	eaffffe8 	b	5c0 <__call_exitprocs+0xd8>
 61c:	e5963004 	ldr	r3, [r6, #4]
 620:	e3530000 	cmp	r3, #0
 624:	e5963000 	ldr	r3, [r6]
 628:	1a000008 	bne	650 <__call_exitprocs+0x168>
 62c:	e3530000 	cmp	r3, #0
 630:	0a000006 	beq	650 <__call_exitprocs+0x168>
 634:	e1a00006 	mov	r0, r6
 638:	e58b3000 	str	r3, [r11]
 63c:	e320f000 	nop	{0}
 640:	e59b6000 	ldr	r6, [r11]
 644:	e3560000 	cmp	r6, #0
 648:	1affffb5 	bne	524 <__call_exitprocs+0x3c>
 64c:	eaffffe8 	b	5f4 <__call_exitprocs+0x10c>
 650:	e1a0b006 	mov	r11, r6
 654:	e1a06003 	mov	r6, r3
 658:	eafffff9 	b	644 <__call_exitprocs+0x15c>
 65c:	000007d8 	.word	0x000007d8
 660:	00000000 	.word	0x00000000

00000664 <register_fini>:
 664:	e92d4008 	push	{r3, lr}
 668:	e59f3010 	ldr	r3, [pc, #16]	; 680 <register_fini+0x1c>
 66c:	e3530000 	cmp	r3, #0
 670:	159f000c 	ldrne	r0, [pc, #12]	; 684 <register_fini+0x20>
 674:	1bffff49 	blne	3a0 <atexit>
 678:	e8bd4008 	pop	{r3, lr}
 67c:	e12fff1e 	bx	lr
 680:	00000800 	.word	0x00000800
 684:	00000688 	.word	0x00000688

00000688 <__libc_fini_array>:
 688:	e92d4038 	push	{r3, r4, r5, lr}
 68c:	e59f5030 	ldr	r5, [pc, #48]	; 6c4 <__libc_fini_array+0x3c>
 690:	e59f4030 	ldr	r4, [pc, #48]	; 6c8 <__libc_fini_array+0x40>
 694:	e0654004 	rsb	r4, r5, r4
 698:	e1b04144 	asrs	r4, r4, #2
 69c:	10855104 	addne	r5, r5, r4, lsl #2
 6a0:	0a000004 	beq	6b8 <__libc_fini_array+0x30>
 6a4:	e5353004 	ldr	r3, [r5, #-4]!
 6a8:	e1a0e00f 	mov	lr, pc
 6ac:	e12fff13 	bx	r3
 6b0:	e2544001 	subs	r4, r4, #1
 6b4:	1afffffa 	bne	6a4 <__libc_fini_array+0x1c>
 6b8:	eb000050 	bl	800 <__libc_fini>
 6bc:	e8bd4038 	pop	{r3, r4, r5, lr}
 6c0:	e12fff1e 	bx	lr
 6c4:	00000818 	.word	0x00000818
 6c8:	0000081c 	.word	0x0000081c

000006cc <__cs3_premain>:
 6cc:	e92d4008 	push	{r3, lr}
 6d0:	eb00001d 	bl	74c <__libc_init_array>
 6d4:	e59f3030 	ldr	r3, [pc, #48]	; 70c <__cs3_premain+0x40>
 6d8:	e3530000 	cmp	r3, #0
 6dc:	15930000 	ldrne	r0, [r3]
 6e0:	01a00003 	moveq	r0, r3
 6e4:	e59f3024 	ldr	r3, [pc, #36]	; 710 <__cs3_premain+0x44>
 6e8:	e3530000 	cmp	r3, #0
 6ec:	15931000 	ldrne	r1, [r3]
 6f0:	01a01003 	moveq	r1, r3
 6f4:	e3a02000 	mov	r2, #0
 6f8:	ebfffed7 	bl	25c <main>
 6fc:	e59f3010 	ldr	r3, [pc, #16]	; 714 <__cs3_premain+0x48>
 700:	e3530000 	cmp	r3, #0
 704:	1bffff2d 	blne	3c0 <exit>
 708:	eafffffe 	b	708 <__cs3_premain+0x3c>
	...
 714:	000003c0 	.word	0x000003c0

00000718 <_exit>:
 718:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 71c:	e3a00018 	mov	r0, #24
 720:	e59f1004 	ldr	r1, [pc, #4]	; 72c <_exit+0x14>
 724:	ef123456 	svc	0x00123456
 728:	eafffffe 	b	728 <_exit+0x10>
 72c:	00020026 	.word	0x00020026

00000730 <__cs3_isr_interrupt>:
 730:	eafffffe 	b	730 <__cs3_isr_interrupt>

00000734 <__cs3_isr_undef>:
 734:	eafffffe 	b	734 <__cs3_isr_undef>

00000738 <__cs3_isr_swi>:
 738:	eafffffe 	b	738 <__cs3_isr_swi>

0000073c <__cs3_isr_pabort>:
 73c:	eafffffe 	b	73c <__cs3_isr_pabort>

00000740 <__cs3_isr_dabort>:
 740:	eafffffe 	b	740 <__cs3_isr_dabort>

00000744 <__cs3_isr_irq>:
 744:	eafffffe 	b	744 <__cs3_isr_irq>

00000748 <__cs3_isr_fiq>:
 748:	eafffffe 	b	748 <__cs3_isr_fiq>

0000074c <__libc_init_array>:
 74c:	e92d4070 	push	{r4, r5, r6, lr}
 750:	e59f506c 	ldr	r5, [pc, #108]	; 7c4 <__libc_init_array+0x78>
 754:	e59f606c 	ldr	r6, [pc, #108]	; 7c8 <__libc_init_array+0x7c>
 758:	e0656006 	rsb	r6, r5, r6
 75c:	e1b06146 	asrs	r6, r6, #2
 760:	12455004 	subne	r5, r5, #4
 764:	13a04000 	movne	r4, #0
 768:	0a000005 	beq	784 <__libc_init_array+0x38>
 76c:	e5b53004 	ldr	r3, [r5, #4]!
 770:	e2844001 	add	r4, r4, #1
 774:	e1a0e00f 	mov	lr, pc
 778:	e12fff13 	bx	r3
 77c:	e1560004 	cmp	r6, r4
 780:	1afffff9 	bne	76c <__libc_init_array+0x20>
 784:	e59f5040 	ldr	r5, [pc, #64]	; 7cc <__libc_init_array+0x80>
 788:	e59f6040 	ldr	r6, [pc, #64]	; 7d0 <__libc_init_array+0x84>
 78c:	e0656006 	rsb	r6, r5, r6
 790:	eb000012 	bl	7e0 <_init>
 794:	e1b06146 	asrs	r6, r6, #2
 798:	12455004 	subne	r5, r5, #4
 79c:	13a04000 	movne	r4, #0
 7a0:	0a000005 	beq	7bc <__libc_init_array+0x70>
 7a4:	e5b53004 	ldr	r3, [r5, #4]!
 7a8:	e2844001 	add	r4, r4, #1
 7ac:	e1a0e00f 	mov	lr, pc
 7b0:	e12fff13 	bx	r3
 7b4:	e1560004 	cmp	r6, r4
 7b8:	1afffff9 	bne	7a4 <__libc_init_array+0x58>
 7bc:	e8bd4070 	pop	{r4, r5, r6, lr}
 7c0:	e12fff1e 	bx	lr
 7c4:	000007f8 	.word	0x000007f8
 7c8:	000007f8 	.word	0x000007f8
 7cc:	000007f8 	.word	0x000007f8
 7d0:	00000800 	.word	0x00000800

Disassembly of section .rodata:

000007d8 <_global_impure_ptr>:
 7d8:	00000840 00000043                       @...C...

000007e0 <_init>:
 7e0:	e1a0c00d 	mov	r12, sp
 7e4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 7e8:	e24cb004 	sub	r11, r12, #4
 7ec:	e24bd028 	sub	sp, r11, #40	; 0x28
 7f0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 7f4:	e12fff1e 	bx	lr

000007f8 <__init_array_start>:
 7f8:	00000664 	.word	0x00000664

000007fc <__frame_dummy_init_array_entry>:
 7fc:	00000208                                ....

00000800 <__libc_fini>:
 800:	e1a0c00d 	mov	r12, sp
 804:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 808:	e24cb004 	sub	r11, r12, #4
 80c:	e24bd028 	sub	sp, r11, #40	; 0x28
 810:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 814:	e12fff1e 	bx	lr

00000818 <__fini_array_start>:
 818:	000001c4 	.word	0x000001c4

0000081c <__cs3_regions>:
	...
 828:	00000c70 	.word	0x00000c70
 82c:	00000020 	.word	0x00000020
